package sampleJFrame;

import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Timer;

import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;

public class FieldPanel extends JPanel {
	private static final long serialVersionUID = 1L;
	JLabel gameLabel;
	Animal cat01;
	Animal cat02;
	JLayeredPane layeredPane;
	CatPot catPot;
	Animal animal;
	Timer timer;

	JLabel greenLabel;

	// コンストラクタ
	public FieldPanel() {
		this.setBackground(Color.orange);
		this.setLayout(null);
//		new DDListener();

	}

	// コンストラクタが呼び出された後に手動で呼び出す
	public void prepareComponents() {

		layeredPane = new JLayeredPane();
//		final int PANE_WIDTH = layeredPane.getWidth();
//		final int PANE_HEIGHT = layeredPane.getHeight();
//		layeredPane.setLayout(null);

//		layeredPane.setBounds(0, 0, PANE_WIDTH, PANE_HEIGHT);
		layeredPane.setBounds(0, 0, 1000, 800);
		this.add(layeredPane);

		Animal cat01 = new Cat_Normal();
		vitalizeCat(cat01);
		Animal cat02 = new Cat_Normal();
		vitalizeCat(cat02);
//		List<Animal> animal = new ArrayList<>();
//		animal.add(cat01);
//		animal.add(cat02);

		catPot = new CatPot();
		catPot.setLocation(400, 400);
		this.layeredPane.add(catPot, JLayeredPane.DEFAULT_LAYER);
		this.layeredPane.add(cat01, 500);
		this.layeredPane.add(cat02, 400);
	}

//	ネコにリスナーをつけてからパネルにはるメソッド
	public void vitalizeCat(Animal a) {
		new DDListener(a);
		this.add(a);
	}

	// 内部クラス（ドラッグアンドドロップ用）
	private class DDListener extends MouseAdapter {
		private int dx;
		private int dy;

		// コンストラクタ
		DDListener(Animal a) {
			animal = a;
			animal.addMouseListener(this);
			animal.addMouseMotionListener(this);
		}

		public void mousePressed(MouseEvent e) {
			// 抑えたところからラベル左上の差を取っておく
			dx = e.getXOnScreen() - animal.getX();
			dy = e.getYOnScreen() - animal.getY();
		}

		public void mouseDragged(MouseEvent e) {
			int x = e.getXOnScreen() - dx;
			int y = e.getYOnScreen() - dy;
			if (x < Main.mainWindow.gamePanel.fieldPanel.layeredPane.getWidth() - animal.getWidth() - 5 && x > 5) {
				animal.x = x;
			}
			if (y < Main.mainWindow.gamePanel.fieldPanel.getHeight() - animal.getHeight() - 5 && y > 5) {
				animal.y = y;
			}
			animal.setLocation(x, y);
		}

	}

	// カップの上でネコを離すと消えて得点が加算
	public void mouseReleased(MouseEvent e) {
		int x = e.getXOnScreen();
		int y = e.getYOnScreen();
		int px = (int) catPot.getLocationOnScreen().getX();
		int py = (int) catPot.getLocationOnScreen().getY();
		int ph = catPot.getHeight();
		int pw = catPot.getWidth();
		if ((px < x) && (x < px + pw) && (py < y) && (y < py + ph)) {
			// 鳴き声を再生
//			MySpeaker.playSE(animal.voiceKey);
			// スコア計算と不可視化処理
//			sampleJFrame..MainWindow.gamePanel.score += animal.score;
//			String str = "SCORE：" + sampleJFrame.mianWindow.gamePanel.score;
//			sampleJFrame.MainWindow.gamePanel.menuBar.ScoreLabel.setText(str);
			animal.setVisible(false);
			// 追加
//			generate Animal();
		} else {
//			animal.timer.start();
		}

	}
}
